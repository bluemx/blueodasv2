app.component("oda-titulo",{props:{title:String,subtitle:String},setup(props,context){const ODA=inject("ODA");return ODA.title=props.title,ODA.subtitle=props.subtitle,{ODA:ODA}},template:'\n        <div class="py-5">\n            <h1 class="font-extrabold text-5xl text-main">{{ODA.title}}</h1>\n            <h2 class="font-bold text-sec" v-if="ODA.subtitle">{{ODA.subtitle}}</h2>\n        </div>\n        '}),app.component("oda-instruccion",{props:{text:String},setup:(props,context)=>({}),template:'\n        <div class="text-sec text-2xl my-20 flex items-center instructions">\n            <span class="iconify" data-icon="fxemoji:blackdiamondsuit"></span>\n            <span v-textfn><slot></slot></span>\n        </div>\n        '}),app.component("oda-icon",{props:{name:String},setup:(props,context)=>({name:props.name}),template:'\n        <span class="icon inline animate__animated animate__heartBeat">\n            <span class="iconify " :data-icon="name"></span>\n        </span>\n        '}),app.component("oda-finalizar",{props:{},setup(props,context){const RESULTS=inject("RESULTS"),finalized=ref(!1);return{finalize:()=>{s_win.play(),finalized.value=!0,emitter.emit("finalize")},finalized:finalized,RESULTS:RESULTS,reset:()=>{location.reload()}}},template:'\n        <div class="my-20 text-center">\n            <template v-if="!finalized">\n                <button class="\n                    font-extrabold\n                    px-12 py-6\n                    bg-clear\n                    text-sec\n                    text-3xl\n                    rounded-2xl\n                " @click="finalize" >Finalizar</button>\n            </template>\n            <template v-else>\n                <div class="text-center animate__animated animate__backInDown">\n                    <div class="font-extrabold text-4xl text-main">RESULTADOS</div>\n                    <div class="font-bold text-4xl text-isok mt-5">{{RESULTS.oks}} correctas</div>\n                    <div class="text-lg mt-3"> de {{RESULTS.oks+RESULTS.errors}} preguntas</div>\n                    <button class="mt-5 font-extrabold px-8 py-4 bg-clear text-white text-xl rounded-2xl " @click="reset" >Volver a intentar</button>\n                </div>\n            </template>\n        </div>\n        '}),app.component("util-result",{props:{result:Boolean},setup(props,context){const result=props.result,item=ref(null);return onMounted((()=>{item.value.parentNode.classList.add("relative","ring","ring-offset-4","rounded"),item.value.parentNode.classList.add(result?"ring-isok":"ring-notok")})),{result:result,item:item}},template:"\n        <div ref=\"item\" :class=\"[\n                'result', \n                result?'isok bg-isok':'notok bg-notok',\n                'absolute -top-4 -right-4',\n                'w-6 h-6 rounded-full text-white text-lg',\n                'flex justify-center items-center'\n            ]\" >\n                <oda-icon name=\"uil:check\" v-if=\"result\" />\n                <oda-icon name=\"uil:times\" v-else />\n        </div>\n        "}),app.component("layout-grid",{props:{columns:String,columnsMd:String,gap:String,class:String},setup(props,context){const columns=props.columns||4;return{columns:columns,columnsMd:props.columnsMd||columns,gap:props.gap||2,itemClass:props.class||""}},template:"\n        <div :class=\"[\n            'layoutGrid',\n            'grid',\n            'grid-cols-'+columns,\n            'md:grid-cols-'+columnsMd,\n            'gap-'+gap,\n            'rounded-xl',\n            itemClass\n        ]\">\n            <slot></slot>\n        </div>\n        "}),app.component("layout-box",{props:{class:String,design:String,img:String},setup(props,context){const itemDesign=ref(" rounded-xl ");if(null!=props.design){let boxdesign=" p-4 border border-gray-200 aspect-square flex justify-center items-center";props.design,"simple"==props.design&&(boxdesign=" p-2 flex justify-center items-center"),"text"==props.design&&(boxdesign=" p-2"),itemDesign.value+=boxdesign}const itemClass=ref(props.class||"");props.img&&(itemClass.value+="w-full h-full bg-cover bg-no-repeat bg-center relative");return{itemClass:itemClass,itemDesign:itemDesign,itemBgImg:props.img?"background-image:url("+props.img+")":""}},template:'\n        <div :class="[\n            \'layoutBox\',\n            itemDesign,\n            itemClass\n        ]"\n            :style="itemBgImg"\n        >\n            <slot></slot>\n        </div>\n        '}),app.component("layout-img",{props:{class:String,img:String},setup:(props,context)=>({itemClass:ref(props.class||""),itemImg:ref(props.img)}),template:'\n        <img :src="itemImg" :class="itemClass">\n        '}),app.component("module-check",{props:{answer:Number,class:String,options:Array,float:String},setup(props,context){const RESULTS=inject("RESULTS"),finalized=ref(!1),result=ref(),options=["",...props.options],itemClass=ref(props.class||""),itemCheckClass=ref("");if(null!=props.float){itemCheckClass.value+="absolute z-10 ";let pos="top-2 left-2";"topleft"==props.float&&(pos=" top-2 left-2 "),"topright"==props.float&&(pos=" top-2 right-2 "),"bottomleft"==props.float&&(pos=" bottom-2 left-2 "),"bottomright"==props.float&&(pos=" bottom-2 right-2 "),console.log(pos),itemCheckClass.value+=pos,console.log(itemCheckClass.value)}const active=ref(0);return emitter.on("finalize",(e=>{finalized.value=!0,props.answer==active.value?(result.value=!0,RESULTS.oks++):(result.value=!1,RESULTS.errors++)})),{itemClass:itemClass,itemCheckClass:itemCheckClass,options:options,clicked:()=>{if(finalized.value)return!1;active.value+=1,s_select.play(),active.value>options.length-1&&(active.value=0)},active:active,finalized:finalized,result:result}},template:'\n        <div :class="[\n                \'moduleCheck\',\n                \'flex cursor-pointer items-center relative\',\n                itemClass\n            ]"\n            @click="clicked"\n        >\n            <util-result :result="result" v-if="finalized" />\n            <div :class="[\n                \'module-check-box\',\n                \'w-9 h-9 flex items-center justify-center mr-2 rounded-full\',\n                \'border-2 border-solid border-clear\',\n                \'bg-white shadow-oda\',\n                itemCheckClass\n            ]">\n                <template v-for="(icon, index) in options">\n                    <template v-if="index==active ">\n                        <oda-icon :name="icon" v-if="icon"  />\n                    </template>\n                </template>\n            </div>\n            <slot></slot>\n        </div>\n        '});